/* ----------------------------- */
/* == grid */
/* ----------------------------- */

@gutter: 4;
@smallscreen: 420px;

.grid(@rows, @gutter, @classname) {
  .@{classname} {

    & > div {
      @width: (100 - ((@rows - 1) * @gutter)) / @rows;
      @margin: unit(@gutter, ~"%");
      width: unit(@width, ~"%");
      margin: 0 @margin @margin 0;
    }

    & > div:nth-child(@{rows}n) {
      margin-right: 0;
    }
  }
}

.unequal-grid(@column1, @column2, @gutter, @classname) {
  @width: 100 - @gutter;
  @wcolumn1: (@width / (@column1 + @column2)) * @column1;
  @wcolumn2: (@width / (@column1 + @column2)) * @column2;

  .@{classname} {
    & > div:nth-child(1n) {
      width: unit(@wcolumn1, ~"%");
    }

    & > div:nth-child(2n) {
      margin-left: unit(@gutter, ~"%");
    }

    & > div:nth-child(2n) {
      width: unit(@wcolumn2, ~"%");
    }
  }
}

* {
  box-sizing: border-box;
}

[class^="grid"]:after {
  display: table;
  clear: both;
  content: "";
}

[class^="grid"] > div {
  float: left;
}

.grid(2, @gutter, grid-2);
.grid(3, @gutter, grid-3);
.grid(4, @gutter, grid-4);
.unequal-grid(2, 1, @gutter, grid-2-1);
.unequal-grid(1, 3, @gutter, grid-1-3);
.unequal-grid(3, 1, @gutter, grid-3-1);
.unequal-grid(1, 4, @gutter, grid-1-4);

@media (max-width : @smallscreen) {
  [class^="grid"] > div {
    float: none !important;
    width: auto !important;
    margin-right: auto !important;
    margin-left: auto !important;
  }
}